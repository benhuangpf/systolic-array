iverilog -o mid blackbox.v test_tpu.v tpu_top.v write_out.v systolic.v systolic_controll.v quantize.v addr_sel.v sram_256x32b.v sram_16x128b.v
vvp -n mid -lxt2

/chipyard/tests
gcc test.c 
./a.out
make

sims/verilator
make CONFIG=MMTLBlackBoxRocketConfig run-binary BINARY=/home/ben/chipyard/tests/matmul_mmio.riscv
./simulator-chipyard.harness-MMTLBlackBoxRocketConfig /home/ben/chipyard/tests/matmul_mmio.riscv

/chipyard/generators/gemmini/software/gemmini-rocc-tests
pattern.h
./build.sh

/chipyard/generators/gemmini
./scripts/run-spike.sh matmul_rocc
./scripts/build-verilator.sh
./scripts/run-verilator.sh matmul_rocc

        uint32_t out1=0, out2=0, out3=0, out4=0;
        out1 = (uint8_t)a0[2][0]<<24;
        out2 = (uint8_t)(a0[2][1])<<16;
        out3 = (uint8_t)b0[2][0]<<24|(uint8_t)b0[2][1]<<16|(uint8_t)b0[2][2]<<8|(uint8_t)b0[2][3];
        out4 = b1[2][0]<<24|b1[2][1]<<16|b1[2][2]<<8|b1[2][3];
        // uint64_t n[2];
        // n[0] = 0b1100100000100101101011000001000101010010110100101000000000000000;
        // n[1] = 0b1100100000100101101011000001000101010010110100101000000000000000;        
        // int16_t *pt2 [2];
        // pt2[0] = (int16_t*)&n[0];
        // pt2[1] = (int16_t*)&n[1];
        
        printf("%b\n", out1);
        printf("%b\n", out2);
        printf("%b\n", out3);
        printf("%b\n", out4);
        // printf("%d %d %d %d\n", pt2[0][3], pt2[0][2], pt2[0][1], pt2[0][0]);


//////test_tpu.v/////////
task data2sram;
  begin
	// reset tmp_mat1, tmp_mat2, tmp_c_mat1, tmp_c_mat2
	for(i = 0; i< ARRAY_SIZE ; i = i + 1) begin
		tmp_c_mat1[i] = 0;
		tmp_c_mat2[i] = 0;
		tmp_mat1[i] = 0;
		tmp_mat2[i] = 0;
	end	
	// combine three batch together into tmp_mat1, tmp_mat2
	for(i = 0; i< 3 ; i = i + 1) begin
		for(j = 0; j< ARRAY_SIZE; j = j+1)begin
			tmp_c_mat1[j] = {mat1[ARRAY_SIZE*i+j], tmp_c_mat1[j][(ARRAY_SIZE*3*DATA_WIDTH-1) -: 2*DATA_WIDTH*ARRAY_SIZE]};
			tmp_c_mat2[j] = {mat2[ARRAY_SIZE*i+j], tmp_c_mat2[j][(ARRAY_SIZE*3*DATA_WIDTH-1) -: 2*DATA_WIDTH*ARRAY_SIZE]};
		end
		$write("%b\n%b\n", tmp_c_mat1[0], mat1[ARRAY_SIZE*i]);
	end
	$write("\n\n");
	for(i = 0; i< ARRAY_SIZE ; i = i + 1) begin
		case (i % 4)
			0 : begin
				tmp_mat1[i] = {24'b0, tmp_c_mat1[i]};
				tmp_mat2[i] = {24'b0, tmp_c_mat2[i]};
			    end
			1 : begin
				tmp_mat1[i] = {16'b0, tmp_c_mat1[i], 8'b0};
				tmp_mat2[i] = {16'b0, tmp_c_mat2[i], 8'b0};
			    end
			2 : begin
				tmp_mat1[i] = {8'b0, tmp_c_mat1[i], 16'b0};
				tmp_mat2[i] = {8'b0, tmp_c_mat2[i], 16'b0};
			    end
			3 : begin
				tmp_mat1[i] = {tmp_c_mat1[i], 24'b0};
				tmp_mat2[i] = {tmp_c_mat2[i], 24'b0};
			    end
			default : begin
					tmp_mat1[i] = 0;
					tmp_mat2[i] = 0;
				  end
		endcase
	end
	$write("%b\n", tmp_mat1[0]);
	
	for(i = 0; i < 128; i=i+1)begin
		if(i < (ARRAY_SIZE*3+3))begin
		sram_128x32b_a0.char2sram(i,{tmp_mat1[0][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[1][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[2][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[3][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH]});
		sram_128x32b_a1.char2sram(i,{tmp_mat1[4][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[5][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[6][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat1[7][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH]});
		
		sram_128x32b_b0.char2sram(i,{tmp_mat2[0][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[1][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[2][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[3][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH]});
		sram_128x32b_b1.char2sram(i,{tmp_mat2[4][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[5][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[6][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH], tmp_mat2[7][(DATA_WIDTH*(i+1)-1) -: DATA_WIDTH]});
		end
		else begin
			sram_128x32b_a0.char2sram(i, 32'b0);
			sram_128x32b_a1.char2sram(i, 32'b0);

			sram_128x32b_b0.char2sram(i, 32'b0);
			sram_128x32b_b1.char2sram(i, 32'b0);
		end

	end
	// $write("SRAM a0!!!!\n");
	// for(i = 0; i< 30 ; i = i + 1) begin
    //                 $write("SRAM at address %d is \n%d %d %d %d",i[7:0],$signed(sram_128x32b_a0.mem[i][31:24]),$signed(sram_128x32b_a0.mem[i][23:16]),$signed(sram_128x32b_a0.mem[i][15:8]),$signed(sram_128x32b_a0.mem[i][7:0]));
	// 				$write(" %d %d %d %d  \n",$signed(sram_128x32b_a1.mem[i][31:24]),$signed(sram_128x32b_a1.mem[i][23:16]),$signed(sram_128x32b_a1.mem[i][15:8]),$signed(sram_128x32b_a1.mem[i][7:0]));
	// end
	// $write("SRAM b0!!!!\n");
	// for(i = 0; i< 30 ; i = i + 1) begin
    //                 $write("SRAM at address %d is \n%d %d %d %d",i[7:0],$signed(sram_128x32b_b0.mem[i][31:24]),$signed(sram_128x32b_b0.mem[i][23:16]),$signed(sram_128x32b_b0.mem[i][15:8]),$signed(sram_128x32b_b0.mem[i][7:0]));
	// 				$write(" %d %d %d %d  \n",$signed(sram_128x32b_b1.mem[i][31:24]),$signed(sram_128x32b_b1.mem[i][23:16]),$signed(sram_128x32b_b1.mem[i][15:8]),$signed(sram_128x32b_b1.mem[i][7:0]));
	// end
	$write("uint32_t a0[128] = {\n");
	for(i = 0; i< 26 ; i = i + 1) $write("0b%b,\n",sram_128x32b_a0.mem[i]);
	$write("0b%b};\n\n",sram_128x32b_a0.mem[26]);

	$write("uint32_t a1[128] = {\n");
	for(i = 0; i< 26 ; i = i + 1) $write("0b%b,\n",sram_128x32b_a1.mem[i]);
	$write("0b%b};\n\n",sram_128x32b_a1.mem[26]);

	$write("uint32_t b0[128] = {\n");
	for(i = 0; i< 26 ; i = i + 1) $write("0b%b,\n",sram_128x32b_b0.mem[i]);
	$write("0b%b};\n\n",sram_128x32b_b0.mem[26]);

	$write("uint32_t b1[128] = {\n");
	for(i = 0; i< 26 ; i = i + 1) $write("0b%b,\n",sram_128x32b_b1.mem[i]);
	$write("0b%b};\n\n",sram_128x32b_b1.mem[26]);
  end
endtask	


//display the mnist image in 28x28 SRAM
task display_data;
integer this_i, this_j, this_k;
    begin
	for(this_k=0; this_k<3;this_k = this_k +1)begin
		$write("------------------------\n");
        	for(this_i=0;this_i<ARRAY_SIZE;this_i=this_i+1) begin
            		for(this_j=0;this_j<ARRAY_SIZE;this_j=this_j+1) begin
               			$write("%d",mat1[this_i][this_j]);
				$write(" ");
            		end
            		$write("\n");
        	end
		$write("\n");
        	for(this_i=0;this_i<ARRAY_SIZE;this_i=this_i+1) begin
            		for(this_j=0;this_j<ARRAY_SIZE;this_j=this_j+1) begin
               			$write("%d",mat2[this_i][this_j]);
				$write(" ");
            		end
            		$write("\n");
        	end
		$write("------------------------\n");
            	$write("\n");
	end
    end
endtask

task golden_transform;
integer this_i, this_j, this_k;
  begin
	for(this_k=0; this_k<(ARRAY_SIZE*2-1);this_k = this_k +1)begin	  
		trans_golden1[this_k] = 0;
		trans_golden2[this_k] = 0;
		trans_golden3[this_k] = 0;
	end
	for(this_k=0; this_k<(ARRAY_SIZE*2-1);this_k = this_k +1)begin	  
		for(this_i=0;this_i<ARRAY_SIZE;this_i=this_i+1) begin
            		for(this_j=0;this_j<ARRAY_SIZE;this_j=this_j+1) begin
				if((this_i+this_j)==this_k)begin
					trans_golden1[this_k] = {golden1[this_i][((this_j+1)*OUT_DATA_WIDTH-1) -: OUT_DATA_WIDTH], trans_golden1[this_k][(8*16-1)-:(7*OUT_DATA_WIDTH)]};
					trans_golden2[this_k] = {golden2[this_i][((this_j+1)*OUT_DATA_WIDTH-1) -: OUT_DATA_WIDTH], trans_golden2[this_k][(8*16-1)-:(7*OUT_DATA_WIDTH)]};
					trans_golden3[this_k] = {golden3[this_i][((this_j+1)*OUT_DATA_WIDTH-1) -: OUT_DATA_WIDTH], trans_golden3[this_k][(8*16-1)-:(7*OUT_DATA_WIDTH)]};
				end 
            		end
        	end
	end

	$write("Here shows the trans_golden1!!!\n");
	for(this_k=0; this_k<(ARRAY_SIZE*2-1);this_k = this_k +1)begin	  
		for(this_i=ARRAY_SIZE;this_i>0;this_i=this_i-1) begin
            		$write("%d ", $signed(trans_golden1[this_k][(this_i*OUT_DATA_WIDTH-1) -: OUT_DATA_WIDTH]));
        	end
		$write("\n\n");
	end

	

	$write("uint64_t trans_golden1[14] = {\n");
	for(i = 0; i< 14 ; i = i + 1) $write("0b%b,\n",trans_golden1[i]);
	$write("0b%b};\n\n",trans_golden1[14]);

	$write("uint64_t trans_golden2[14] = {\n");
	for(i = 0; i< 14 ; i = i + 1) $write("0b%b,\n",trans_golden2[i]);
	$write("0b%b};\n\n",trans_golden2[14]);

	$write("uint64_t trans_golden3[14] = {\n");
	for(i = 0; i< 14 ; i = i + 1) $write("0b%b,\n",trans_golden3[i]);
	$write("0b%b};\n\n",trans_golden3[14]);

  end
endtask 